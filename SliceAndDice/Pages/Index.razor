@page "/"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using SliceAndDice.Data;

@inject IDatabseData _db
@inject SingletonServise singleton
@inject NavigationManager navigate

<div class="backGroundUp">
    <div class="logoImage"></div>
</div>

<div class="backGroundDown">
    <div class="items">
                <label style="
margin-top: 30px;
    width: 377px;
    margin-left: 2%;
    height: 40px;
    font-style: normal;
    font-weight: 600;
    font-size: 35px;
    display: flex;
    align-items: flex-end;
    text-align: center;
    text-decoration-line: none;
    color: red;
">@ErrorMessage</label>
        <input @bind-value="login" class="inputAuthoRectangle" placeholder="Логин" />
        <input @bind-value="password" class="inputAuthoRectangle" placeholder="Пароль" />
        <button class="btnAuth" @onclick="@SignIn">Войти</button>
        <a class="hyperLinkReg" href="/registration">Нет аккаунт?</a>

    </div>
</div>

@code  {
    string login = "";
    string password = "";
    private List<UserModel> users;
    private string ErrorMessage = "";
    protected override void OnInitialized()
    {
        singleton.SetUser(null);
    }

    public async void SignIn()
    {
        if (login != "" && password != "")
        {
            users = await _db.GetUser();
            List<RoleModel> roles = await _db.GetRole();
            List<EmployeeModel> employees = await _db.GetEmployee();
            users = users.Where(element => element.Login == login && element.Password == password).ToList();
            if (users.Count() != 0)
            {
                singleton.SetUser(users[0]);
                singleton.SetRole(users[0].Employee_id != null ? roles.Where(x => x.ID_Role == employees.Where(element => element.ID_Employee == users[0].Employee_id).First().Role_id).First().Name : "Пользователь");
                navigate.NavigateTo("/main");
            }
            else
            {
                ErrorMessage = "Пользователя с такими данными нет.";
                this.StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Не все поля заполнены.";
            this.StateHasChanged();
        }
    }
}