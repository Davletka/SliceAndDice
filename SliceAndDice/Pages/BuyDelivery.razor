
@page "/BuyAndDelivery"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using SliceAndDice.Data;

@inject IDatabseData _db
@inject SingletonServise singleton
@inject NavigationManager navigate


@if (basket == null || basket.Count() == 0)
{
    <label style="
margin-top: 30px;
    width: 377px;
    margin-left: 2%;
    height: 40px;
    font-style: normal;
    font-weight: 600;
    font-size: 35px;
    display: flex;
    align-items: flex-end;
    text-align: center;
    text-decoration-line: none;
    color: wheat;
">Loading...</label>
}
else
{
    @foreach (var i in basket)
    {

        <div class="card-menu">
            <div class="card-img-menu">
                <img src="@GetImageData(dishs.Where(element => element.ID_DIsh == i.Dish_id).First().Image)" alt="Изображение" />
            </div>

            <div class="card-text-menu">
                <div class="card-name-menu">
                    @dishs.Where(element => element.ID_DIsh == i.Dish_id).First().Name
                </div>

                <div class="card-subtitle-menu">
                    @dishs.Where(element => element.ID_DIsh == i.Dish_id).First().Description
                </div>
            </div>


            <div class="pay-card-count">

                <div class="card-price-menu">
                    @(dishs.Where(element => element.ID_DIsh == i.Dish_id).First().Cost * i.Count)
                </div>

                <div class="count-menu">
                    <button @onclick="(() => IncreaseQuantity(i, false))" class="btn-count">-</button>

                    <span class="card-subtitle-menu">@i.Count</span>

                    <button @onclick="(() => IncreaseQuantity(i, true))" class="btn-count">+</button>
                </div>

            </div>
        </div>


    }

}

<button @onclick = "CreateOrder" class="zakaz-pay">Заказать</button>

@code {

    List<BasketModel> basket = new List<BasketModel>() { };
    List<DishModel> dishs = new List<DishModel>() { };

    private async void CreateOrder()
    {
        int sum = 0;
        foreach (var i in basket)
        {
            sum = sum + (dishs.Where(element => element.ID_DIsh == i.Dish_id).First().Cost * i.Count);
        }
        await _db.InsertOrder(new OrderModel
            {
                Status_id = 2,
                User_id = singleton.GetUser().ID_User,
                Sum = sum
            });
            List<OrderModel> orders = await _db.GetOrder();
            int orderId = orders.Where(element => element.User_id == singleton.GetUser().ID_User).First().ID_Order;
        foreach (var i in basket)
        {
            await _db.InsertOrderDish(new Order_DishModel
                {
                    Count = i.Count,
                    Dish_id = i.Dish_id,
                    Order_id = orderId
                });
        }
        navigate.NavigateTo("/zakaz");
    }
    private async void IncreaseQuantity(BasketModel item, bool isPlus)
    {
        if (isPlus)
        {
            item.Count++;
        }
        else
        {
            if (item.Count == 1)
            {
               await _db.DelteBasket(item);
                basket = await _db.GetBasket();
                StateHasChanged();
                return;
            }
            else
            {
                item.Count--;
            }
        }
        await _db.UpdateBasket(item);
        this.StateHasChanged();

    }

    protected async override void OnInitialized()
    {
        if (singleton.GetUser() == null)
        {
            navigate.NavigateTo("/");
        }
        List<OrderModel> orders = await _db.GetOrder();
        if (orders.Where(element => element.User_id == singleton.GetUser().ID_User).Count() != 0)
        {
            navigate.NavigateTo("/zakaz");
        }
        dishs = await _db.GetDish();
        basket = await _db.GetBasket();
        this.StateHasChanged();
    }
    private string GetImageData(Byte[] image)
    {
        return $"data:image;base64,{Convert.ToBase64String(image)}";
    }
}

